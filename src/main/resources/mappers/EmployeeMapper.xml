<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzp.RBAC.mappers.EmployeeMapper">
  <resultMap id="BaseResultMap" type="com.zzp.RBAC.domain.Employee">
    <!--@mbg.generated-->
    <!--@Table employee-->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="admin" jdbcType="BIT" property="admin" />
    <!--维护one方对象-->
    <association property="dept" javaType="Department" columnPrefix="dept_">
      <id column="id" jdbcType="BIGINT" property="id" />
      <result column="name" jdbcType="VARCHAR" property="name" />
    </association>

    <!--
        维护many方关系
            property="roles" : Employee对象关联的Role实体对象(字段)名
            column="id" : 根据Employee对象中的id通过employee_role表关联查询到role表中的数据
            select="cn.wolfcode.rbac.mapper.RoleMapper.selectByEmployeeId" : 关联查询时所调用的SQL语句,调用该SQL语句时,将column="id"传过去
      -->
    <collection property="roles" column="id" select="com.zzp.RBAC.mappers.RoleMapper.selectByEmployeeId"/>
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, `name`, `password`, email, age, `admin`, dept_id
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    e.id, e.name, e.password, e.email, e.age, e.admin,
    d.id dept_id, d.name dept_name
    <include refid="base_table"/>
    where e.id = #{employeeId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--@mbg.generated-->
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.zzp.RBAC.domain.Employee" useGeneratedKeys="true">
    insert into employee (name, password, email,
    age, admin, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
    #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.zzp.RBAC.domain.Employee" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into employee
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        `name`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="admin != null">
        `admin`,
      </if>
<!--      <if test="deptId != null">-->
<!--        dept_id,-->
<!--      </if>-->
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="admin != null">
        #{admin,jdbcType=BIT},
      </if>
<!--      <if test="deptId != null">-->
<!--        #{deptId,jdbcType=BIGINT},-->
<!--      </if>-->
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zzp.RBAC.domain.Employee">
    <!--@mbg.generated-->
    update employee
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="admin != null">
        `admin` = #{admin,jdbcType=BIT},
      </if>
<!--      <if test="deptId != null">-->
<!--        dept_id = #{deptId,jdbcType=BIGINT},-->
<!--      </if>-->
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zzp.RBAC.domain.Employee">
    update employee
    set name = #{name,jdbcType=VARCHAR},
    email = #{email,jdbcType=VARCHAR},
    age = #{age,jdbcType=INTEGER},
    admin = #{admin,jdbcType=BIT},
    dept_id = #{dept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

<!--  <select id="findAll" resultMap="BaseResultMap">-->
<!--    select * from employee-->
<!--  </select>-->

  <select id="findByNameAndPassword" resultMap="BaseResultMap">
    select * from employee where name=#{username} and password=#{password}
  </select>

  <select id="findAllCount" resultType="integer">
    select count(*) from employee
  </select>

  <select id="findAdminCount" resultType="integer">
    select count(*) from employee where admin=#{admin}
  </select>


  <select id="findRoleCount" resultType="integer">
    select count(*) from role
  </select>

  <!--查询分页数据-->
  <select id="findAll" resultMap="BaseResultMap">
    select
    e.id, e.name, e.email, e.age, e.admin,
    d.id dept_id, d.name dept_name
    <include refid="base_table"/>
    <include refid="base_where"/>
  </select>
  <!--sql片段-->
  <sql id="base_table">
    from employee e
        left join department d on e.dept_id=d.id
  </sql>
  <sql id="base_where">
    <where>
      <if test="keyword!=null and keyword!=''">
        and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
      </if>
      <if test="deptId>0">
        and e.dept_id=#{deptId}
      </if>
    </where>
  </sql>
  <delete id="deleteRelation">
    delete from employee_role
    where employee_id=#{employeeId}
  </delete>
    <insert id="insertRelation">
        insert into employee_role(employee_id, role_id) value(#{employeeId},#{roleId});
    </insert>
</mapper>